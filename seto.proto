
message seq_message {
    required sint32 seq = 1;
    required payload payload = 2;
    optional bool replay = 3 [default = false];
}

message replay {
    required sint32 seq = 1;
}

message login_response {
    required bytes session = 1;
    optional sint32 reset = 2;
}

message id_invalid {
    optional bytes field = 1;
}

message market_quotes {
    required bytes group = 1;
    required contracts_quotes_list contracts_quotes_list = 2;
}

message contracts_quotes_list {
    repeated contract_quotes elem = 1;
}

message contract_quotes {
    required bytes contract = 1;
    required quote_list buy = 2;
    required quote_list sell = 3;
}

message contract_quote {
    required bytes contract = 1;
    required side side = 2;
    required quote_list quote_list = 3;
}

message quote_list {
    repeated quote elem = 1;
}

message quote {
    required bytes price = 1;
    required sint32 quantity = 2;
}

message order_subscription {
    required bytes order = 1;
}

message order_subscribed {
    required bytes order = 1;
}

message order_unsubscription {
    required bytes order = 1;
}

message order_unsubscribed {
    required bytes order = 1;
}

message market_request {
    required bytes group = 1;
}

message market_subscription {
    required bytes group = 1;
}

message market_subscribed {
    required bytes group = 1;
}

message market_unsubscription {
    required bytes group = 1;
}

message market_unsubscribed {
    required bytes group = 1;
}

message order_create {
    required sint32 quantity = 1;
    required bytes price = 2;
    required side side = 3;
    required bytes group = 4;
    required bytes contract = 5;
}

message order_invalid {
    required order_invalid_reason_list reasons = 1;
}

message order_invalid_reason_list {
    repeated order_invalid_reason elem = 1;
}

enum order_invalid_reason {
    price_not_in_range = 1;
    quantity_too_small = 2;
}

message order_accepted {
    required sint32 seq = 1;
    required bytes order = 2;
}

message order_rejected {
    required sint32 seq = 1;
    required order_rejected_reason reason = 2;
}

enum order_rejected_reason {
    insufficient_funds = 1;
    limit_exceeded = 2;
    market_not_open = 3;
    market_settled = 4;
    market_halted = 5;
    crossed_self = 6;
    error = 7;
}

message order_executed {
    required bytes order = 1;
    required bytes price = 2;
    required sint32 quantity = 3;
}

message order_cancel {
    required bytes order = 1;
}

message order_cancelled {
    required bytes order = 1;
    optional order_cancelled_reason reason = 2;
}

enum order_cancelled_reason {
    member_requested = 1;
}

enum side {
    buy = 1;
    sell = 2;
}

message transient {
    optional push_accepted push_accepted = 1;
    optional push_executed push_executed = 2;
    optional push_cancelled push_cancelled = 3;
    optional market_data market_data = 4;
    optional contract_data contract_data = 5;
}

message market_data {
    required bytes group = 1;
    required sint32 contract_count = 2;
    required bytes name = 3;
}

message contract_data {
    required bytes contract = 1;
    required bytes name = 2;
}

message push_accepted {
    required sint32 quantity = 1;
    required bytes price = 2;
    required side side = 3;
    required bytes group = 4;
    required bytes contract = 5;
}

message push_executed {
    required sint32 quantity = 1;
    required bytes price = 2;
    required side side = 3;
    required bytes group = 4;
    required bytes contract = 5;
}

message push_cancelled {
    required sint32 quantity = 1;
    required bytes price = 2;
    required side side = 3;
    required bytes group = 4;
    required bytes contract = 5;
}

message push_price {
    required bytes contract = 1;
    required bytes group = 2;
    required bytes price = 3;
    required side side = 4;
    required sint32 quantity = 5;
    required double ts = 6;
}

message login {
    optional bytes session = 1;
    required bytes username = 2;
    required bytes password = 3;
}

message payload {
    optional bool ping = 1;
    optional bool pong = 2;
    optional bool gapfill = 3;
    optional replay replay = 4;
    optional login login = 5;
    optional login_response login_response = 6;
    optional order_create order_create = 7;
    optional order_rejected order_rejected = 8;
    optional order_accepted order_accepted = 9;
    optional order_executed order_executed = 10;
    optional order_cancel order_cancel = 11;
    optional order_cancelled order_cancelled = 12;
    optional order_invalid order_invalid = 13;
    optional order_subscription order_subscription = 14;
    optional order_subscribed order_subscribed = 15;
    optional order_unsubscription order_unsubscription = 16;
    optional order_unsubscribed order_unsubscribed = 17;
    optional market_subscription market_subscription = 18;
    optional market_subscribed market_subscribed = 19;
    optional market_unsubscription market_unsubscription = 20;
    optional market_unsubscribed market_unsubscribed = 21;
    optional market_request market_request = 22;
    optional market_quotes market_quotes = 23;
    optional contract_quote contract_quote = 24;
    optional id_invalid id_invalid = 25;
}

